apiVersion: v1
kind: Namespace
metadata:
  name: argocd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-bootstrap
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-bootstrap-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: argocd-bootstrap
  namespace: argocd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-bootstrap-installer
  namespace: argocd
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: argocd-bootstrap-installer
    spec:
      serviceAccountName: argocd-bootstrap
      containers:
        - name: install-argocd
          image: bitnami/kubectl:1.25.12
          command:
            - /bin/sh
            - -c
            - |
              echo "[INFO] Installing ArgoCD from remote Kustomize source..." && \
              kubectl apply -k "https://github.com/argoproj/argo-cd/manifests/cluster-install?ref=v2.9.6"
          securityContext:
            runAsUser: 0
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-app-bootstrap
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "40"
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: argocd-app-bootstrap
    spec:
      serviceAccountName: argocd-bootstrap
      containers:
        - name: bootstrap
          image: bitnami/kubectl:1.25.12
          command:
            - /bin/sh
            - -c
            - |
              echo "[INFO] Waiting for ArgoCD to become available..." && \
              while ! kubectl get svc argocd-server -n argocd >/dev/null 2>&1; do
                echo "[INFO] Waiting for argocd-server..."; sleep 5;
              done && \
              echo "[INFO] ArgoCD is ready. Applying app-of-apps..." && \
              kubectl create ns crossplane-system || true && \
              kubectl apply -f https://raw.githubusercontent.com/juanroldan1989/platform/main/argo/app-of-apps.yaml
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
      restartPolicy: OnFailure
